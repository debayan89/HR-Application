/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.17).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.deluxe.hrapp.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import com.deluxe.hrapp.exception.UnknownException;
import com.deluxe.hrapp.model.Employee;
import com.deluxe.hrapp.model.EmployeeRequest;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import io.swagger.annotations.AuthorizationScope;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-11-04T20:26:35.102Z")

@Api(value = "employee", description = "the employee API")
@RequestMapping(value = "/v1")
public interface EmployeeApi {

    @ApiOperation(value = "Add a new employee to the HR App", nickname = "addemployee", notes = "", tags={ "hrapp", })
    @ApiResponses(value = { 
    @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/employee/add",
        produces = { "application/json" }, 
        consumes = { "application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Integer> addemployee(@RequestHeader("authorization") String token, @ApiParam(value = "employee object that needs to be added to the HR App" ,required=true )  @Valid @RequestBody EmployeeRequest body) throws UnknownException;


    
    
    
    
	@ApiOperation(value = "Deletes a employee", nickname = "deleteemployee", notes = "", tags = {"hrapp", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid ID supplied"),
	@ApiResponse(code = 404, message = "employee not found") })
	@RequestMapping(value = "/employee/{employeeId}", produces = { "application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteemployee(@RequestHeader("authorization") String token, 
			@ApiParam(value = "employee id to delete", required = true) @PathVariable("employeeId") Integer employeeId) throws UnknownException;

    
	
	
	@ApiOperation(value = "Get all Employee", nickname = "findAllEmployee", notes = "", response = Employee.class, responseContainer = "List",tags={ "hrapp", })
    @ApiResponses(value = { 
			        @ApiResponse(code = 200, message = "successful operation", response = Employee.class, responseContainer = "List"),
			        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/employee/getAll",
			        produces = { "application/json" }, 
			        method = RequestMethod.GET)
    ResponseEntity<List<Employee>> findAllEmployee(@RequestHeader("authorization") String token) throws UnknownException;


	
	
	
    @ApiOperation(value = "Find employee by ID", nickname = "getemployeeById", notes = "Returns a single employee", response = Employee.class, tags={ "hrapp", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "employee not found") })
    @RequestMapping(value = "/employee/{employeeId}",
        produces = {  "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Employee> getemployeeById(@RequestHeader("authorization") String token, @ApiParam(value = "ID of employee to return",required=true) @PathVariable("employeeId") Integer employeeId) throws UnknownException;


    
    
    
    @ApiOperation(value = "Update an existing employee", nickname = "updateemployee", notes = "", tags={ "hrapp", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "employee not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/employee/update/{employeeId}",
        produces = { "application/json" }, 
        consumes = { "application/json"},
        method = RequestMethod.PUT)
    ResponseEntity<Employee> updateemployee(@RequestHeader("authorization") String token, @ApiParam(value = "employee object that needs to be updated to the HR App" ,required=true )  @Valid @RequestBody EmployeeRequest body ,@PathVariable("employeeId") Integer employeeId) throws UnknownException;

}
